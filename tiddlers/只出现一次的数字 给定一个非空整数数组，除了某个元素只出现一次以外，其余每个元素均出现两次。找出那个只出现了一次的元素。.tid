created: 20220608022511709
difficulty: 1
due: 20221001060501728
grade: 2
history: [{"due":"20220613122152344","interval":0,"difficulty":1.0984764469154382,"stability":0.10185546875000001,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220612122152344"},{"due":"20220701023511024","interval":3,"difficulty":1,"stability":15.531848239754114,"retrievability":0.04490366339741324,"grade":2,"lapses":0,"reps":2,"review":"20220615023511024"}]
interval: 20
lapses: 0
modified: 20220705060501728
reps: 3
retrievability: 0.8731304672290258
review: 20220705060501728
stability: 88.3647639214822
tags: hbase ?
title: 只出现一次的数字 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
type: text/vnd.tiddlywiki

1，位运算解决
这题说的是只有一个数出现了一次，其他数字都出现了2次，让我们求这个只出现一次的数字。这题使用位运算是最容易解决的，关于位运算有下面几个规律

1^1=0;

1^0=1;

0^1=1;

0^0=0;



也就说0和1异或的时候相同的异或结果为0，不同的异或结果为1，根据上面的规律我们得到

a^a=0；自己和自己异或等于0

a^0=a；任何数字和0异或还等于他自己

a^b^c=a^c^b；异或运算具有交换律

有了这3个规律，这题就很容易解了，我们只需要把所有的数字都异或一遍，最终的结果就是我们要求的那个数字。来看下代码


public int singleNumber(int nums[]) {
    int result = 0;
    for (int i = 0; i < nums.length; i++)
        result ^= nums[i];
    return result;
}

2，使用集合Set解决
这个应该是最容易想到的，我们遍历数组中的元素，然后在一个个添加到集合Set中，如果添加失败，说明以前添加过，就把他给移除掉。当我们把数组中的所有元素都遍历完的时候，集合Set中只会有一个元素，这个就是我们要求的值。


public int singleNumber(int[] nums) {
    Set<Integer> set = new HashSet<>();
    for (int num : nums) {
        if (!set.add(num)) {
            //如果添加失败，说明这个值
            //在集合Set中存在，我们要
            //把他给移除掉
            set.remove(num);
        }
    }
    //最终集合Set中只有一个元素，我们直接返回
    return (int) set.toArray()[0];
}

作者：数据结构和算法
链接：https://leetcode.cn/leetbook/read/top-interview-questions/xm0u83/?discussion=VumtOv
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

3.

`
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        tmp=nums[0]
        for i in range(1,len(nums)-1):
            if nums[i]==tmp:
                tmp=nums[i+1]
                i+=1
        return tmp
`