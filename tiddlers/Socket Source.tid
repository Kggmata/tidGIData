created: 20220612062841579
difficulty: 1.0514734796021072
due: 20220911003941273
grade: 1
history: [{"due":"20220615090222969","interval":0,"difficulty":0.956170980055279,"stability":0.10092773437500001,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220614090222968"},{"due":"20220617104954393","interval":2,"difficulty":1.2801254823962773,"stability":0.07425364270040997,"retrievability":0.12395450234099842,"grade":0,"lapses":1,"reps":1,"review":"20220616104954392"},{"due":"20220619150918670","interval":2,"difficulty":1.5386766373737528,"stability":0.05491298557316543,"retrievability":0.05855115497747565,"grade":0,"lapses":2,"reps":1,"review":"20220618150918670"},{"due":"20220630135827810","interval":2,"difficulty":1,"stability":9.829205553538575,"retrievability":0.021550365655700003,"grade":1,"lapses":2,"reps":2,"review":"20220620135827810"}]
interval: 15
lapses: 2
modified: 20220705003941273
reps: 3
retrievability: 0.8514734796021072
review: 20220705003941272
stability: 67.55400154832964
tags: [[structed streaming]] ?
title: Socket Source
type: text/vnd.tiddlywiki

 功能：监听socket server发送来的数据

选项：

| option选项 | 内容           |
| ---------- | -------------- |
| host       | 指定监听的主机 |
| port       | 指定监听的端口 |

```
# coding:utf8
"""
演示Spark结构化流的Socket Source
"""
from pyspark.sql import SparkSession
from pyspark.sql.types import StringType, IntegerType, StructType

# 构建入口对象，SparkSession对象
spark = SparkSession.builder.\
    master("local[*]").\
    appName("test spark").\
    config("spark.default.parallelism", 1).\
    config("spark.sql.shuffle.partitions", 1).\
    getOrCreate()

# 构建socket source
socket_df = spark.readStream.\
    format("socket").\
    option("host", "node1").\
    option("port", 9999).\
    load()

socket_df.writeStream.\
    outputMode("update").\
    format("console").\
    start().awaitTermination()

```

执行代码前，请在node1上启动9999端口的socket server：

```shell
# node1上执行
nc -lk 9999
```

