created: 20220716130255957
difficulty: 1.0464951521155361
due: 20221214144003294
grade: 1
history: [{"due":"20220726124727349","interval":0,"difficulty":0.07897385645727227,"stability":0.10000011324882507,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220725124727349"},{"due":"20220819030757926","interval":9,"difficulty":1,"stability":16.43780488763927,"retrievability":0.00007617816609952556,"grade":2,"lapses":0,"reps":2,"review":"20220803030757926"}]
interval: 26
lapses: 0
modified: 20220829144003294
reps: 3
retrievability: 0.846495152115536
review: 20220829144003294
stability: 106.98850634093834
tags: ?
title: 高层级抽象视角
type: text/vnd.tiddlywiki

Flink 的提交流程，随着部署模式、资源管理平台的不同，会有不同的变化**。首先我们从一个高层级的视角，来做一下抽象提炼，看一看作业提交时宏观上各组件是怎样交互协作的

[img[image-20220713184051187.png]]

具体步骤如下：

```
1. 一般情况下，由客户端（App）通过分发器提供的 REST 接口，将作业提交给JobManager。
2. 由分发器启动 JobMaster，并将作业（包含 JobGraph）提交给 JobMaster。
3. JobMaster 将 JobGraph 解析为可执行的 ExecutionGraph，得到所需的资源数量，然后向资源管理器请求资源（slots）。
4. 资源管理器判断当前是否由足够的可用资源；如果没有，启动新的 TaskManager。
5. TaskManager 启动之后，向 ResourceManager 注册自己的可用任务槽（slots）。
6. 资源管理器通知 TaskManager 为新的作业提供 slots。
7. TaskManager 连接到对应的 JobMaster，提供 slots。
8. JobMaster 将需要执行的任务分发给 TaskManager。
9. TaskManager 执行任务，互相之间可以交换数据。

```
```
如果部署模式不同，或者集群环境不同（例如 Standalone、YARN、K8S 等），其中一些步骤可能会不同或被省略，也可能有些组件会运行在同一个 JVM 进程中。比如我们在上一章实践过的独立集群环境的会话模式，就是需要先启动集群，如果资源不够，只能等待资源释放，而不会直接启动新的 TaskManager。

接下来我们就具体介绍一下不同部署环境下的提交流程。
```