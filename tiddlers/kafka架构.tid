created: 20220609014228268
difficulty: 1.289646807798803
due: 20220927082704704
grade: 1
history: [{"due":"20220613132318063","interval":0,"difficulty":1.0984764469154382,"stability":0.10185546875000001,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220612132318063"},{"due":"20220616225524740","interval":3,"difficulty":1.3433801103128513,"stability":0.07476910459712456,"retrievability":0.04490366339741324,"grade":0,"lapses":1,"reps":1,"review":"20220615225524740"},{"due":"20220630114914156","interval":2,"difficulty":1,"stability":11.836102036103545,"retrievability":0.05970794686757527,"grade":2,"lapses":1,"reps":2,"review":"20220618114914156"},{"due":"20220705140321631","interval":16,"difficulty":2.067251759178322,"stability":0.05488166082758644,"retrievability":0.867251759178322,"grade":0,"lapses":2,"reps":1,"review":"20220704140321631"},{"due":"20220719031143799","interval":6,"difficulty":1.2672617020147212,"stability":8.620805243899898,"retrievability":0.00000994283639911803,"grade":1,"lapses":2,"reps":2,"review":"20220710031143799"}]
interval: 16
lapses: 2
modified: 20230102012807708
modifier: Yangqing QU
reps: 3
retrievability: 0.8223851057840816
review: 20220726082704704
stability: 63.30711837839615
tags: stream实时/kafka ?
title: kafka架构
type: text/vnd.tiddlywiki



[img[20220609151330.png]]

如图，Kafka中存在如下概念：

```
1. broker：就是1台服务器的Kafka的进程，我们叫做Broker，它就是kafka的工作者
2. Topic（主题）：订阅发布模式的kafka，中有对应的消息主题
3. Producer，生产者：我们将提供数据的程序，称呼为数据生产者
4. Customer，消费者：我们将从kafka取出数据的程序，叫做消费者
```

基础架构：

```
元数据：Kafka的部分元数据保存在ZK中
- 数据写入：生产者，将它产生的数据，按照`顺序，挨个写入`对应主题的`各个分区`
- 数据读取：消费者，会`监听它感兴趣的主题的全部分区`，从这些分区中取出`新消息
```

>消费的顺序：
>
>1. Kafka一个分区内的消息被消费出去的顺序，是不会产生混乱
>
>2. Kafka多个分区之间的消息，消费出去的顺序，是可以和发送的顺序不一致的。
>
>   网络波动不可控，网络波动后，这个分区之间的顺序就可能错乱
>
>   这个顺序的错乱，在大数据体系下，大部分场景下都不重要，无所谓
>
>如果我必须要保证，发送的数据是什么顺序，接受的就必须是这个顺序，怎么做：
>
>100%稳妥的方式，就是1个分区。
