created: 20220713080101550
difficulty: 1.0629401309871824
due: 20221125111822517
grade: 1
history: [{"due":"20220720010347985","interval":0,"difficulty":0.10459372128306473,"stability":0.1000004529953003,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220719010347984"},{"due":"20220814144715874","interval":10,"difficulty":1,"stability":16.439132088688883,"retrievability":0.0000265626666297211,"grade":1,"lapses":0,"reps":2,"review":"20220729144715873"}]
interval: 23
lapses: 0
modified: 20220821111822517
reps: 3
retrievability: 0.8629401309871825
review: 20220821111822517
stability: 95.74595654194536
tags: ?
title: B树和B+树
type: text/vnd.tiddlywiki

https://segmentfault.com/a/1190000020416577

B-树有如下特点:
[img[B+树和B树的区别 - 简书2022-07-13 16_08_22.webp]]
[img[B+树和B树的区别 - 简书2022-07-13 16_10_05.webp]]

```
1 B-树的关键字、记录和索引是放在一起的；B+树的非叶子节点中只有关键字和指向下一个节点的索引，记录只放在叶子节点中。

2 在B-树中，越靠近根节点的记录查找时间越快，只要找到关键字即可确定记录的存在；而B+树中每个记录的查找时间基本是一样的，都需要从根节点走到叶子节点，而且在叶子节点中还要再比较关键字。

3 在实际应用中B+树的性能要好些。因为B+树的非叶子节点不存放实际的数据，这样每个节点可容纳的元素个数比B-树多，树高比B-树小，这样带来的好处是减少磁盘访问次数。尽管B+树找到一个记录所需的比较次数要比B-树多，但是一次磁盘访问的时间相当于成百上千次内存比较的时间，因此实际中B+树的性能可能还会好些，而且B+树的叶子节点使用指针连接在一起，方便顺序遍历（例如查看一个目录下的所有文件，一个表中的所有记录等），这也是很多数据库和文件系统使用B+树的缘故。
```

