created: 20220726035845439
modified: 20230102012832555
modifier: Yangqing QU
tags: ? stream实时/flink
title: b+tree索引分类
type: text/vnd.tiddlywiki

```
聚集索引(主键)
辅助索引(非聚集索引,二级)
  普通索引
  唯一索引
  联合索引
```
```
聚集索引和主键索引的异同
  都是叶子节点存放数据
  但是聚集索引是存放一整行数据, 辅助索引只存放该列和主键
```
```
每张表只能有一个聚集索引, 如果是select *操作, 倾向于使用聚集索引
聚集索引对于主键的排序和范围查找非常块
```
```
联合索引
如上图所示，联合索引的结点以(a列的值,b列的值)形式存储。

下面看看如何使用联合索引进行查询：

select * from tb1 where a=? and b=?，走联合索引，因为a和b在一起是排序的；

select * from tb1 where a=?，走联合索引，因为单独的a是排序的；

select * from tb1 where b=?，不走联合索引，因为单独的b不是排序的，如上图，b的顺序为1,2,1,4,1,2；
```
[img[Mysql什么情况下不走索引？ - 墨天轮2022-07-26 12_02_27.png]]

```
覆盖索引:
如果能够直接从辅助索引上拿到数据而不需要回表
```
```
操作索引:
查看某个表的索引: show index from 表名
```
```
索引失效的情况
1 where中的字段加函数, 因为b+tree只支持原值进行索引
2 索引列尽量不要存在Null值
3 联合索引遵循最左前缀原则
4 使用in不走索引, 用exists代替, 如果是连续的数值可以用between代替
5 避免在where中使用or
6 like不能前置百分比
7 where不要使用!=或者<>
8 limit offset查询缓慢时, 可以借助主键索引提高性能
```