created: 20220621122814277
difficulty: 1
due: 20220914132608295
grade: 2
history: [{"due":"20220625123949457","interval":0,"difficulty":0.4015068894836844,"stability":0.1000072479248047,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220624123949457"},{"due":"20220709061852579","interval":2,"difficulty":1,"stability":13.480992008275221,"retrievability":0.12159522294586199,"grade":2,"lapses":0,"reps":2,"review":"20220626061852579"}]
interval: 14
lapses: 0
modified: 20221210005806793
modifier: Yangqing QU
reps: 3
retrievability: 0.8963567239886889
review: 20220710132608294
stability: 65.98229464323742
tags: userProfile用户画像 ?
title: 用户画像BaseModel基类开发
type: text/vnd.tiddlywiki

什么是重构?

* 为什么需要重构？
  ** 代码重复，代码冗余
* 什么是重构？
  ** 主要就是抽取和封装一些公共代码，形成项目整体框架
* 代码重构的原则？
  ** 不影响之前的业务

重构思路

```
* \#0.准备Spark开发环境(重复)

* \#1.读取MySQL中的数据(重复)

* \#2.读取模型/标签相关的4级标签rule并解析--=**=标签id不一样==**

  * **性别标签 id=4**
  * **年龄段的标签 id=14**

  \#3.【ES的数据源】根据解析出来的rule读取ES数据(重复)

  \#4.【5级标签】读取模型/标签相关的5级标签(根据4级标签的id作为pid查询)---**==标签id不一样==**

  \#====5.根据ES数据和5级标签数据进行匹配,得出userId,tagsId---**==实现代码不一样==**

  \#6.查询elasticsearch中的oldDF(重复)

  \#7.合并newDF和oldDF(重复)

  \#8.将最终结果写到ES(重复)
```

* 接下来重构代码：

```
  * **思路：重点将同样的部分抽取到基类中(父类/父接口)，不一样的部分可以在子类中实现**
  * 1-首先将相同的代码直接在基类实现即可
  * 2-对于不同的业务代码，可以在基类中定义为抽象方法，在子类中实现该抽象方法即可
```

重构实现方式

* （1）抽象基类由abc模块构成，包含了一个叫做ABCMeta的metaclass。
* （2）就可以将重复的代码直接封装在BaseModelES的抽象类中
* （3）将不一样的步骤/代码做出抽象方法让子类/实现类去重写/实现模版方法设计模式。

abc模块
* 抽象基类由abc模块构成，包含了一个叫做ABCMeta的metaclass, 使用metaclass=abc.ABCMeta或者abc.ABC