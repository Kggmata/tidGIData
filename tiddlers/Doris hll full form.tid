created: 20220728032755310
modified: 20220728085432178
tags: ? flink
title: Doris hll full form
type: text/vnd.tiddlywiki

https://cloud.tencent.com/developer/article/1479465#:~:text=Hyperloglog(HLL)%E6%98%AF%E6%8C%87%E4%BB%8E,%E5%B0%8F%E4%BA%8E2%EF%BC%85%E7%9A%84%E8%AF%AF%E5%B7%AE%E3%80%82

```
hyperloglog
是从loglog算法派生出的概率算法, 用来确定非常大的集合的基数, 而不需要存储其所有值, 基数策略是概率性的, 意味着小于百分之2的误差
```
```
HyperLogLog基本原理
通俗来说HLL是通过散列中左边连续0的数量来估计给定集合的基数，因为一个好的哈希算法可以确保我们每个可能的散列具有大致相同的出现概率和均匀分布。
```
```
Redis中的Hyperloglog
Redis使用16384寄存器实现HLL结构，使标准误差达到0.81％。至于散列函数，Redis使用的散列函数具有64位输出，这意味着它使用前14位来寻址16k寄存器，剩下的50位用于计算左边的0的数量。正如我们之前看到的，每个存储子集将存储最高的0流到该点，最高可能为50（因为散列中只有50个剩余位可以是0），每个存储子集需要6位才能能够存储最多50个（二进制为110010）。因此我们得到98304位来存储1个HLL结构，如果我们将这些位转换为字节，我们得到12288个字节（或12kb） 这就是hyperloglog在Redis实现占用的空间大小。
```