created: 20220601034635917
difficulty: 1
due: 20220907064008255
grade: 2
history: [{"due":"20220604130552747","interval":0,"difficulty":1.4747668508725869,"stability":0.107421875,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220603130552747"},{"due":"20220624005531709","interval":4,"difficulty":1,"stability":16.874327987238487,"retrievability":0.019776864699927257,"grade":2,"lapses":0,"reps":2,"review":"20220607005531708"},{"due":"20220626123223141","interval":18,"difficulty":2.093696518950571,"stability":0.07408719146292923,"retrievability":0.893696518950571,"grade":0,"lapses":1,"reps":1,"review":"20220625123223140"},{"due":"20220710013813892","interval":4,"difficulty":1.297081318790266,"stability":10.73109559329744,"retrievability":0.003384799839695139,"grade":1,"lapses":1,"reps":2,"review":"20220629013813892"}]
interval: 12
lapses: 1
modified: 20220711064008255
reps: 3
retrievability: 0.8888569844249402
review: 20220711064008255
stability: 57.81869871632668
tags: hbase ?
title: HBase VS Hive
type: text/vnd.tiddlywiki

- 架构上：

  - HBase是一个`分布式`的系统，主从模式
  - Hive是一个`单机`的系统（Hive底层运行的MapReduce是分布式的）

- 事务上：都不怎么支持

  > 事务就是指对数据进行操作的一种保险
  >
  > 如果不支持事务，比如银行转账记录要存储到数据库中，如果出现问题 这一条数据就是丢失了
  >
  > 如果有事务，会经过多个步骤：
  >
  > 1. 开启事务
  > 2. 插入SQL语句
  > 3. 插入SQL语句2
  > 4. 更新表SQL语句
  > 5. 删除数据SQL语句
  > 6. 关闭（提交）事务
  >
  > 在事务的开启 和 关闭的中间的所有操作，是整体性的；要么`全部成功` 要么`全部失败`
  >
  > 不会出现，成功一半 失败一半。

- 场景上：

  - HBase 海量数据存储 + 随机访问能力

  - Hive  海量数据批处理（分析）

    > 也就是HBase和Hive都提供查询能力
    >
    > HBase的查询能力在于：随机查询 + 高吞吐输出（一批数据的输出）
    >
    > Hive的查询能力在于：对海量数据进行全量计算，得到结果



> 总体总结：
>
> - RDBMS：小量数据下供业务数据走：CRUD（增删改查）
> - HDFS：海量数据下的文件系统（存储）
> - Hive：海量数据下的批处理（全量计算）
> - HBase：海量数据下的随机访问



> HBase这么好，为什么还要HDFS：
>
> 1. HBase底层是基于HDFS
>
> 2. 哪怕HBase和HDFS没有联系，它们的出发点也不一一样，HDFS依旧有用
>
>    1. HBase存储是用于随机访问的
>
>    2. HDFS存储是单纯的存数据
>
>       如果是存储文件，有必要用HBase？没必要，用HDFS就可以
>
>       如果要存储需要随机访问的数据，用HBase才合适