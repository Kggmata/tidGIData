created: 20220609034228188
difficulty: 1.0785098781342142
due: 20220929094039122
grade: 1
history: [{"due":"20220613140610164","interval":0,"difficulty":1.0984764469154382,"stability":0.10185546875000001,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220612140610164"},{"due":"20220702000707778","interval":4,"difficulty":1,"stability":16.268360859893896,"retrievability":0.015960348310605277,"grade":2,"lapses":0,"reps":2,"review":"20220616000707778"}]
interval: 20
lapses: 0
modified: 20220706094039122
reps: 3
retrievability: 0.8785098781342142
review: 20220706094039122
stability: 84.72864024381416
tags: kafka ?
title: nohup是什么
type: text/vnd.tiddlywiki

linux指令,后台执行

Nohup (''stands for no hangup'') is a command that ignores the HUP signal. You might be wondering what the HUP signal is. It is basically a signal that is delivered to a process when its associated shell is terminated. Usually, when we log out, then all the running programs and processes are hangup or stopped.

详解Linux的nohup和&用法和区别

```
&的意思是在后台运行， 什么意思呢？ 意思是说， 当你在执行 ./start.sh & 的时候， 即使你用ctrl C, 那么start.sh照样运行（因为对SIGINT信号免疫）。 但是要注意， 如果你直接关掉shell后， 那么，start.sh进程同样消失。 可见， &的后台并不硬（因为对SIGHUP信号不免疫）。

nohup的意思是忽略SIGHUP信号， 所以当运行nohup ./start.sh的时候， 关闭shell, 那么start.sh进程还是存在的（对SIGHUP信号免疫）。 但是， 要注意， 如果你直接在shell中用Ctrl C, 那么start.sh进程也是会消失的（因为对SIGINT信号不免疫）

所以， &和nohup没有半毛钱的关系， 要让进程真正不受shell中Ctrl C和shell关闭的影响， 那该怎么办呢？ 那就用nohup ./start.sh &吧， 两全其美。

作者：insmoin
链接：https://www.jianshu.com/p/93a45927f013
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
```