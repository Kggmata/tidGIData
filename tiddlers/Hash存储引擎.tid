created: 20220610004618449
difficulty: 1.0731304672290258
due: 20220929074004413
grade: 1
history: [{"due":"20220614103357720","interval":0,"difficulty":1.0984764469154382,"stability":0.10185546875000001,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220613103357719"},{"due":"20220702035215487","interval":3,"difficulty":1,"stability":15.531848239754114,"retrievability":0.04490366339741324,"grade":2,"lapses":0,"reps":2,"review":"20220616035215487"}]
interval: 20
lapses: 0
modified: 20220706074004413
reps: 3
retrievability: 0.8731304672290258
review: 20220706074004413
stability: 84.8538234387497
tags: kafka ?
title: Hash存储引擎
type: text/vnd.tiddlywiki

https://blog.51cto.com/u_15127582/2749159
https://www.modb.pro/db/138181

1. 存储引擎简介

```
接触数据库比较深的人可能对存储引擎并不陌生，但是大多数数据库管理员可能对存储引擎并不熟悉，因为我们大多数关系型数据库的学习者并不需要关心存储引擎的选择和应用，因为我们熟知的 Oracle 、 SQL Server 等数据库基本只有一种存储引擎，没有给大家选择和设计的机会。但是如果我们接触 MySQL 以及其他一些 NOSQL 数据库比较多的人可能对存储引擎就会深有感受。
```

那么存储引擎是什么？它主要解决什么问题呢？

```
首先，我们认为存储引擎就是如何为了解决存储数据、如何为存储的数据建立索引和如何更新、查询数据等技术的实现方法。用户可以根据应用的需求选择更适合自己应用场景的存储引擎来提高数据库的性能和数据的访问效率。常见的存储引擎有哈希存储引擎、 B 树存储引擎、 LSM 树存储引擎等三种。不同的存储引擎对数据的结构、数据的存储方式、数据的读取方式等都有不同的要求和特点。今天我们要跟大家分享的是其中的一种所谓的哈希存储引擎。哈希存储引擎是一种利用哈希表的持久化实现对数据进行增、删、改以及随机读取的技术。利用哈希存储引擎的常见数据库有 Redis ， Memcache 。
```

4. Hash 存储引擎优略分析

4.1 Hash 存储引擎的优势

```
其实关于哈希存储引擎的优劣分析，我们是希望进一步得到其最适合以及最不适合的使用场景，从而指导我们的实践。同样关于存储引擎的优缺点，追根溯源还是要找到其本身的数据结构特点、组织架构特点以及算法特点。首先，我们来分析哈希存储引擎的数据结构特点。我们在前边提到了它的数据结构以及索引表的结构，我们发现最大的特点就是在于所有的这些数据结构都是以 模式为基础的。所以基于这一点来看，它本身更适合能以键值对的模式表示的数据存储，无论是固定的键值，还是变动的键值。其次，我们来分析哈希存储引擎索引表检索算法的特点。如果冲突处理的算法的当，它大概率可以通过一次哈希函数就可以定位到数据的基本位置，与 B-Tree 存储引擎相比较而言，它少了树根、树枝、树叶节点的遍历和多次的读取操作。所以它的检索效率是非常高的。从这个意义上来讲，如果我们能把这些符合键值对要求的索引表数据全部引入到内存，那么对于随机读取的并发能力提升无疑是巨大的质变，这也是它能被 Redis 、 Memcache 这类内存数据库选中的重要原因。最后，我们来分析哈希存储引擎添加、删除、更新数据的算法特点。基于除了检索之外所有的数据操作都是通过添加新数据来变相实现。同样与 B-Tree 存储引擎相比较而言，添加一条新的纪录远比检索、加锁、修改、放锁这个过程要效率很多。所以对于事务性要求不是非常强，并且包含大量写入及更新的 数据场景就比较有优势了。
```

4.2 Hash 存储引擎的劣势

```
矛盾总是贯穿于事物的发展过程当中，有利就有弊。对于哈希存储引擎也是如此，正是因为它的优势而导致了一些不可避免的劣势。我们还是从其特点说起。首先、由于哈希存储引擎的 数据结构特点，那么对于一些数据内部字段之间以及数据本身有着相对复杂的关系的数据，比如二维表数据。哈希存储引擎就会束手无策。对于一些虽然可以表示成为键值对模式，但是键值之间的关系并没有一个好的哈希函数可以利用的数据，也显得那么苍白无力。其次，由于哈希存储引擎的检索算法是基于哈希索引表的哈希函数计算实现，那么它就只能实现一次比较孤立的数据定位，对于范围的查询以及检索过程当中的一些排序、分组、过滤等操作就力不从心了。由于其检索的时候利用的是索引表的全局数据视图来进行哈希计算，也就是说它的哈希地址不能局部使用，那么对于一些希望利用局部特性完成检索的场景就毫无意义了。最后，还是从其数据增加、删除、更新的算法来看。它是牺牲了大量的存储空间来实现操作的高效性，那么后续必然会带来空间的管理代价以及数据的合并处理代价，数据片越大、哈希树的高度越高，那么数据检索的效率相应会提高很多，因为哈希函数定位之后必然随之而来的是对定位到的数据片的全部扫描，数据片越大，检索的平均效率越差。同时后台执行的数据片合并的时间越长。因此对于数据粒度比较大，又没有一个好的哈希函数可以使用的场景，也不是哈希存储引擎使用的最佳场景。
```

5. 总结展望

```
哈希存储引擎是一种在 NOSQL 数据库当中经常会用到的数据存储引擎技术，尤其是一些内存类数据库。具体数据库在其实现及使用哈希存储引擎的过程当中，涉及的可能不仅仅是文中所述的这些关于数据特点、数据操作特点方面的策略，可能还会涉及到缓存的算法、数据的持久化以及其他的一些方面的策略选择。本文希望通过这些原理性的讨论和分析展示给大家一个基本视图，也希望各位同业针对更多更深层次的内容进行发展性研究探讨并分享。
```

