created: 20220521113000100
difficulty: 3.239558942369815
due: 20220829092648816
grade: 1
history: [{"due":"20220524064718323","interval":0,"difficulty":5,"stability":2,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220522064718323"},{"due":"20220618025233632","interval":8,"difficulty":3.8561000000000005,"stability":18.669346285737497,"retrievability":0.6561,"grade":2,"lapses":0,"reps":2,"review":"20220530025233632"},{"due":"20220810075211723","interval":20,"difficulty":2.949366719934412,"stability":51.62479394535563,"retrievability":0.8932667199344116,"grade":2,"lapses":0,"reps":3,"review":"20220619075211722"},{"due":"20220816052521987","interval":57,"difficulty":4.039547494942042,"stability":0.07408182272361549,"retrievability":0.8901807750076297,"grade":0,"lapses":1,"reps":1,"review":"20220815052521987"}]
interval: 8
lapses: 1
modified: 20220823092648816
reps: 2
retrievability: 0.000011447427772950137
review: 20220823092648816
stability: 5.7191213838353265
tags: yarn ?
title: yarn三类角色
type: text/vnd.tiddlywiki

ResourceManager

ResourceManager 负责整个集群的资源管理和分配，是一个全局的资源管理系统。 
NodeManager 以心跳的方式向 ResourceManager 汇报资源使用情况（目前主要是 CPU 和
内存的使用情况）。RM 只接受 NM 的资源回报信息，对于具体的资源处理则交给 NM 自己
处理。
YARN Scheduler 根据 application 的请求为其分配资源，不负责 application job 的
监控、追踪、运行状态反馈、启动等工作。

 NodeManager

NodeManager 是每个节点上的资源和任务管理器，它是管理这台机器的代理，负责该节点程序的运行，以及该节点资源的管理和监控。YARN 集群每个节点都运行一个NodeManager。
NodeManager 定时向 ResourceManager 汇报本节点资源（CPU、内存）的使用情况和Container 的运行状态。当 ResourceManager 宕机时 NodeManager 自动连接 RM 备用节点。
NodeManager 接收并处理来自 ApplicationMaster 的 Container 启动、停止等各种请求。

ApplicationMaster

用 户 提 交 的 每 个 应 用 程 序 均 包 含 一 个 ApplicationMaster ， 它 可 以 运 行 在ResourceManager 以外的机器上。
负责与 RM 调度器协商以获取资源（用 Container 表示）。
将得到的任务进一步分配给内部的任务(资源的二次分配)。
与 NM 通信以启动/停止任务。
监控所有任务运行状态，并在任务运行失败时重新为任务申请资源以重启任务。
当前 YARN 自带了两个 ApplicationMaster 实现，一个是用于演示AM 编写方法的实例程序 DistributedShell，它可以申请一定数目的Container 以并行运行一个 Shell 命令或者 Shell 脚本；另一个是运行 MapReduce 应用程序的 AM—MRAppMaster。
