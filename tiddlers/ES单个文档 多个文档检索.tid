created: 20220618010551698
difficulty: 1.0824752287483903
due: 20220915131626242
grade: 1
history: [{"due":"20220620143515013","interval":0,"difficulty":0.6469164138781576,"stability":0.10005798339843751,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220619143515013"},{"due":"20220704025417796","interval":2,"difficulty":1,"stability":13.483496769392643,"retrievability":0.12172520545485727,"grade":1,"lapses":0,"reps":2,"review":"20220621025417796"}]
interval: 16
lapses: 0
modified: 20221210005806768
modifier: Yangqing QU
reps: 3
retrievability: 0.8824752287483904
review: 20220707131626242
stability: 70.21185375754096
tags: userProfile用户画像 ?
title: ES单个文档 多个文档检索
type: text/vnd.tiddlywiki

[img[es-th-2-21.png]]
''单个文档''

```
1 客户端向 Node 1 发送获取请求。 
2 节点使用文档的 _id 来确定文档属于分片 0 。分片 0 的副本分片存在于所有的三个节点上。 在这种情况下，它将请求转发到 Node 2 。 
3 Node 2 将文档返回给 Node 1 ，然后将文档返回给客户端。
```

著作权归https://pdai.tech所有。
链接：https://pdai.tech/md/db/nosql-es/elasticsearch-y-th-4.html

```
在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。 

在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。 在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。 一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。
```

''多个文档''

使用 get 取回多个文档的步骤顺序：
[img[es-th-2-22.png]]

以下是使用单个 mget 请求取回多个文档所需的步骤顺序： 

```
1 客户端向 Node 1 发送 mget 请求。 

2 Node 1 为每个分片构建多文档获取请求，然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上。一旦收到所有答复， Node 1 构建响应并将其返回给客户端
```