created: 20220608034107162
difficulty: 1.4925160347588464
due: 20220925120857780
grade: 1
history: [{"due":"20220613122248274","interval":0,"difficulty":1.0984764469154382,"stability":0.10185546875000001,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220612122248274"},{"due":"20220617002358697","interval":4,"difficulty":1.3144367952260434,"stability":0.07442546333264817,"retrievability":0.015960348310605277,"grade":0,"lapses":1,"reps":1,"review":"20220616002358696"},{"due":"20220619142143158","interval":2,"difficulty":1.573372810206144,"stability":0.05491298557316543,"retrievability":0.05893601498010052,"grade":0,"lapses":2,"reps":1,"review":"20220618142143158"},{"due":"20220630133755456","interval":2,"difficulty":1,"stability":9.829205553538575,"retrievability":0.021550365655700003,"grade":1,"lapses":2,"reps":2,"review":"20220620133755456"},{"due":"20220705235709341","interval":14,"difficulty":2.0606496253758357,"stability":0.04065733432235013,"retrievability":0.8606496253758356,"grade":0,"lapses":3,"reps":1,"review":"20220704235709340"},{"due":"20220717044730261","interval":5,"difficulty":1.2606519847003212,"stability":6.80364350146089,"retrievability":0.0000023593244855709656,"grade":1,"lapses":3,"reps":2,"review":"20220710044730261"},{"due":"20220802104638495","interval":12,"difficulty":2.291066113759234,"stability":0.030119455301110827,"retrievability":0.8304141290589127,"grade":0,"lapses":4,"reps":1,"review":"20220722015517673"},{"due":"20220811235920717","interval":15,"difficulty":1.4910661137592338,"stability":4.7602759368978,"retrievability":1.6292697502504215e-23,"grade":1,"lapses":4,"reps":2,"review":"20220806235920717"}]
interval: 10
lapses: 4
modified: 20220817120857780
reps: 3
retrievability: 0.8014499209996125
review: 20220817120857779
stability: 39.4508469113249
tags: hbase ?
title: phoenix加盐原理
type: text/vnd.tiddlywiki

https://developer.aliyun.com/article/532313

1. 什么是加盐？
在密码学中，加盐是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。而Phoenix中加盐是指对pk对应的byte数组插入特定的byte数据。

2. 加盐能解决什么问题？
加盐能解决HBASE读写热点问题，例如:单调递增rowkey数据的持续写入，使得负载集中在某一个RegionServer上引起的热点问题。

3. 怎么对表加盐？
在创建表的时候指定属性值：SALT_BUCKETS，其值表示所分buckets(region)数量， 范围是1~256。

4. 加盐的原理是什么？
加盐的过程就是在原来key的基础上增加''一个byte''作为前缀,计算公式如下：

new_row_key = ((byte) (hash(key) % BUCKETS_NUMBER) + original_key

5. 特别注意

可以看到，在每条rowkey前面加了一个Byte，这里显示为了16进制。也正是因为添加了一个Byte，所以SALT_BUCKETS的值范围在必须再1 ~ 256之间。而添加的这个Byte是根据什么来分的我就不得而知了，所以最好不要使用HBase的API插入数据。

```
因此，在使用SALT_BUCKETS的时候需要注意以下两点：
创建salted table后，应该使用Phoenix SQL来读写数据，而不要混合使用Phoenix SQL和HBase API
如果通过Phoenix创建了一个salted table，那么只有通过Phoenix SQL插入数据才能使得被插入的原始rowkey前面被自动加上一个byte，通过HBase shell插入数据无法prefix原始的rowkey
```

比如使用Hbase的BulkLoad API向SALT_BULKET的表中插入数据中插入数据，会出现ROW_KEY的第一个字节在Phoenix中查看少一位的情况，并且在Phoenix中使用ROW_KEY查询会出现查询不到结果的情况。

5、加盐表的注意事项

```
1）创建加盐表时不能再指定split key

2）一个bucket可以对应多个region

3）太大的slated buckets会减小range查询的灵活性，甚至降低查询性能

4）当可用block cache的大小>表数据大小时，slated buckett和region server数量相同，这样可以得到更好的读写性能。 但当表的数量很大时，基本上会忽略blcok cache的优化收益，大部分数据仍然需要走磁盘IO。比如对于10个region server集群的大表，可以考虑设计64~128个slat buckets。
```
————————————————
版权声明：本文为CSDN博主「lzzyok」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/lzzyok/article/details/119702081