created: 20220618010029361
difficulty: 1
due: 20221002104147411
grade: 2
history: [{"due":"20220620143214964","interval":0,"difficulty":0.6469164138781576,"stability":0.10005798339843751,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220619143214964"},{"due":"20220624132429011","interval":2,"difficulty":1,"stability":0.07410329964720157,"retrievability":0.12172520545485727,"grade":0,"lapses":1,"reps":1,"review":"20220621034807790"},{"due":"20220708114736108","interval":4,"difficulty":1,"stability":12.861584262967543,"retrievability":0.003388987826626389,"grade":1,"lapses":1,"reps":2,"review":"20220625114736108"},{"due":"20220711090049116","interval":15,"difficulty":2.0843714129009734,"stability":0.05488141221849455,"retrievability":0.8843714129009733,"grade":0,"lapses":2,"reps":1,"review":"20220710090049115"},{"due":"20220714005044948","interval":3,"difficulty":2.2875245569839384,"stability":0.04065715014820503,"retrievability":0.0031531440829650446,"grade":0,"lapses":3,"reps":1,"review":"20220713005044948"},{"due":"20220727050812691","interval":8,"difficulty":1.4875245579757277,"stability":6.063898877611692,"retrievability":9.917894733222074e-10,"grade":1,"lapses":3,"reps":2,"review":"20220721050812691"},{"due":"20220804033114752","interval":13,"difficulty":2.485341914282913,"stability":0.03011942545495654,"retrievability":0.7978173563071852,"grade":0,"lapses":4,"reps":1,"review":"20220803033114752"},{"due":"20220812110809709","interval":5,"difficulty":1.6853419396336233,"stability":4.371634936537424,"retrievability":2.535071061321876e-8,"grade":1,"lapses":4,"reps":2,"review":"20220808110809709"}]
interval: 9
lapses: 4
modified: 20221210005806768
modifier: Yangqing QU
reps: 3
retrievability: 0.8050036487570817
review: 20220817104147411
stability: 46.4175304871248
tags: userProfile用户画像 ?
title: ES写入memory buffer和translog的先后顺序
type: text/vnd.tiddlywiki

著作权归https://pdai.tech所有。
链接：https://pdai.tech/md/db/nosql-es/elasticsearch-y-th-3.html

一是和数据库不同，数据库是先写CommitLog，然后再写内存，而Elasticsearch是先写内存，最后才写TransLog，''一种可能的原因是Lucene的内存写入会有很复杂的逻辑，很容易失败，比如分词，字段长度超过限制等，比较重，为了避免TransLog中有大量无效记录，减少recover的复杂度和提高速度，所以就把写Lucene放在了最前面。'' 

二是写Lucene内存后，并不是可被搜索的，需要通过Refresh把内存的对象转成完整的Segment后，然后再次reopen后才能被搜索，一般这个时间设置为1秒钟，导致写入Elasticsearch的文档，最快要1秒钟才可被从搜索到，所以Elasticsearch在搜索方面是NRT（Near Real Time）近实时的系统。 

三是当Elasticsearch作为NoSQL数据库时，''查询方式是GetById，这种查询可以直接从TransLog中查询''，这时候就成了RT（Real Time）实时系统。

四是每隔一段比较长的时间，比如30分钟后，Lucene会把内存中生成的新Segment刷新到磁盘上，刷新后索引文件已经持久化了，历史的TransLog就没用了，会清空掉旧的TransLog。