created: 20220717063201500
difficulty: 1.0464635832213778
due: 20221214144155628
grade: 1
history: [{"due":"20220727080632469","interval":0,"difficulty":0.07897385645727227,"stability":0.10000011324882507,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220726080632469"},{"due":"20220819133214439","interval":8,"difficulty":1,"stability":16.43412713750255,"retrievability":0.00021847658599824263,"grade":1,"lapses":0,"reps":2,"review":"20220803133214439"}]
interval: 26
lapses: 0
modified: 20220829144155628
reps: 3
retrievability: 0.8464635832213778
review: 20220829144155628
stability: 106.9906174952353
tags: ?
title: 流sql流程
type: text/vnd.tiddlywiki

[img[BillfishElwCyW2022-07-17 14_31_55.PNG]]

```
	第一步：将数据输入流转换为 SQL 中的动态输入表。这里的转化其实就是指将输入流映射（绑定）为一个动态输入表。上图虽然分开画了，但是可以理解为一个东西。
	第二步：在动态输入表上执行一个连续查询，然后生成一个新的动态结果表。
	第三步：生成的动态结果表被转换回数据输出流。
我们实际介绍一个案例来看看其运行方式，以上文介绍到的点击事件流为例，点击事件流数据的字段如下：
[
  user:  VARCHAR,   // 用户名
  cTime: TIMESTAMP, // 访问 URL 的时间
  url:   VARCHAR    // 用户访问的 URL
]

	第一步，将输入数据流映射为一个动态输入表。以下图为例，我们将点击事件流（图左）转换为动态表 (图右)。当点击数据源源不断的来到时，动态表的数据也会不断的增加。

[img[BillfishlocbGT2022-07-17 14_32_55.PNG]]

	第二步，在点击事件流映射的动态输入表上执行一个连续查询（Continuous Query），并生成一个新的动态输出表。
```
```
下面介绍两个查询的案例：
第一个查询：一个简单的 GROUP-BY COUNT 聚合查询，写过 SQL 的都不会陌生吧，这种应该都是最基础，最常用的对数据按照类别分组的方法。
如下图所示 group by 聚合的常用案例。

```
[img[BillfishqwfAIC2022-07-17 14_33_36.PNG]]

```
那么本案例中呢，是基于 clicks 表中 user 字段对 clicks 表（点击事件流）进行分组，来统计每一个 user 的访问的 URL 的数量。下面的图展示了当 clicks 输入表来了新数据（即表更新时），连续查询（Continuous Query） 的计算逻辑。
```
[img[BillfishSfHLuq2022-07-17 14_34_02.PNG]]

```
当查询开始，clicks 表(左侧)是空的。
	当第一行数据被插入到 clicks 表时，连续查询（Continuous Query）开始计算结果数据。数据源表第一行数据 [Mary,./home] 输入后，会计算结果 [Mary, 1] 插入（insert）结果表。
	当第二行 [Bob, ./cart] 插入到 clicks 表时，连续查询（Continuous Query）会计算结果 [Bob, 1]，并插入（insert）到结果表。
	第三行 [Mary, ./prod?id=1] 输出时，会计算出[Mary, 2]（user 为 Mary 的数据总共来过两条，所以为 2），并更新（update）结果表，[Mary, 1] 更新成 [Mary, 2]。
	最后，当第四行数据加入 clicks 表时，查询将第三行 [Liz, 1] 插入（insert）结果表中。
注意上述特殊标记出来的字体，可以看到连续查询对于结果的数据输出方式有两种：
	插入（insert）结果表
	更新（update）结果表
大家对于 插入（insert）结果表 这件事都比较好理解，因为离线数据都只有插入这个概念。
但是 更新（update）结果表 就是离线处理中没有概念了。这就是连续查询中中比较重要一个概念。后文会介绍。
接下来介绍第二条查询语句。
第二条查询与第一条类似，但是 group by 中除了 user 字段之外，还 group by 了 tumble，其代表开了个滚动窗口（后面会详细说明滚动窗口的作用），然后计算 url 数量。
group by user，是按照类别（横向）给数据分组，group by tumble 滚动窗口是按时间粒度（纵向）给数据进行分组。如下图所示。

```
[img[BillfishmkVlKr2022-07-17 14_34_29.PNG]]

```
图形化一解释就很好理解了，两种都是对数据进行分组，一个是按照 类别 分组，另一种是按照 时间 分组。
与前面一样，左边显示了输入表 clicks。查询每小时持续计算结果并更新结果表。clicks 表有三列，user，cTime，url。其中 cTime 代表数据的时间戳，用于给数据按照时间粒度分组。

```
[img[BillfishMgSzII2022-07-17 14_34_54.PNG]]

```
我们的滚动窗口的步长为 1 小时，即时间粒度上面的分组为 1 小时。其中时间戳在 12:00:00 - 12:59:59 之间有四条数据。13:00:00 - 13:59:59 有三条数据。14:00:00 - 14:59:59 之间有四条数据。
	当 12:00:00 - 12:59:59 数据输入之后，1 小时的窗口，连续查询（Continuous Query）计算的结果如右图所示，将 [Mary, 3]，[Bob, 1] 插入（insert）结果表。
	当 13:00:00 - 13:59:59 数据输入之后，1 小时的窗口，连续查询（Continuous Query）计算的结果如右图所示，将 [Bob, 1]，[Liz, 2] 插入（insert）结果表。
	当 14:00:00 - 14:59:59 数据输入之后，1 小时的窗口，连续查询（Continuous Query）计算的结果如右图所示，将 [Mary, 1]，[Bob, 2]，[Liz, 1] 插入（insert）结果表。
而这个查询只有 插入（insert）结果表 这个行为。

```