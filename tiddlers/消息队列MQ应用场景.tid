created: 20220609014807861
difficulty: 1.0731304672290258
due: 20220928055512710
grade: 1
history: [{"due":"20220613132825641","interval":0,"difficulty":1.0984764469154382,"stability":0.10185546875000001,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220612132825641"},{"due":"20220701022310239","interval":3,"difficulty":1,"stability":15.531848239754114,"retrievability":0.04490366339741324,"grade":2,"lapses":0,"reps":2,"review":"20220615022310239"}]
interval: 20
lapses: 0
modified: 20230102012807710
modifier: Yangqing QU
reps: 3
retrievability: 0.8731304672290258
review: 20220705055512710
stability: 84.8538234387497
tags: stream实时/kafka ?
title: 消息队列MQ应用场景
type: text/vnd.tiddlywiki

企业中离线业务场景实时业务场景都需要使用到kafka

应用耦合：

```
多应用间通过消息队列对同一消息进行处理，避免调用接口失败导致整个过程失败
```

[img[快速认识Kafka阶段（1）——最详细的Kafka介绍 - 云+.png]]
[img[快速认识Kafka阶段（1）——最详细的Kafka介绍 - 云+_79dd4de1.png]]

 异步处理：

```
多应用对消息队列中同一消息进行处理，应用间并发处理消息，相比串行处理，减少处理时间；
```

[img[快速认识Kafka阶段（1）——最详细的Kafka介绍 - 云+_cdfaa698.png]]

 限流削峰：

```
广泛应用于秒杀或抢购活动中，避免流量过大导致应用系统挂掉的情况；
```
[img[快速认识Kafka阶段（1）——最详细的Kafka介绍 - 云+1.png]]
[img[快速认识Kafka阶段（1）——最详细的Kafka介绍 - 云+3.png]]

 消息驱动的系统：

```
系统分为消息队列、消息生产者、消息消费者，生产者负责产生消息，消费者(可能有多个)负责对消息进行处理
```
