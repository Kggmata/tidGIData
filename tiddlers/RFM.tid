created: 20220627020621620
difficulty: 1
due: 20221113015547661
grade: 2
history: [{"due":"20220630104912695","interval":0,"difficulty":0.2875876480092351,"stability":0.10000181198120117,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220629104912695"},{"due":"20220721001407363","interval":6,"difficulty":1,"stability":16.39358230182641,"retrievability":0.001797216149689106,"grade":2,"lapses":0,"reps":2,"review":"20220705001407363"}]
interval: 25
lapses: 0
modified: 20220730015547661
reps: 3
retrievability: 0.8515701337094802
review: 20220730015547661
stability: 106.35191003523644
tags: 用户画像 ?
title: RFM
type: text/vnd.tiddlywiki

*RFM的引入

  * 从电商行业中引入RFM

```
最近一次用户购买的时间
用户购买的频率
用户购买的金额
```

* RFM案例剖析：

  * ```
    userid,	R值,		   F值,	    M值
    1		2019-11-01   5 		10000
    2		2019-10-01   4 		800
    ```

  * 思考：R的值量纲时间、F的次数，M价格，量纲处理

  * 方案：

    * 方案1：使用SparkMl的MinMaxScler，但是这里使用难度较大，淘汰

    * 方案2：选择方案2，和**业务一起指定**归一化规则

    * ```
      R: 1-3天=5分，4-6天=4分，7-9天=3分，10-15天=2分，大于16天=1分
      F: ≥200=5分，150-199=4分，100-149=3分，50-99=2分，1-49=1分
      M: ≥20w=5分，10-19w=4分，5-9w=3分，1-4w=2分，<1w=1分
      ```

  * ```
    userid,	R值,F值,M值
    1		5  1 	2
    2		3  1 	1
    ```

  * 手动归一化后的效果如上，归一化到1-5分之间，避免因为求解距离对模型带来大量误差

* RFM整体步骤：

  * 1-首先对RFM的取值根据业务或产品沟通得到归一化标准
  * 2-在进行归一化处理
  * 3-使用KMeans聚类算法
  * 4-根据聚类结果给用户打标签(tag)

*保险场景RFM含义

* 适用：理赔活跃度

* R：投保用户最近一次理赔时间
* F：投保用户理赔频率
* M：投保用户出险的理赔金额