created: 20220716004713668
difficulty: 1
due: 20221125114847464
grade: 2
history: [{"due":"20220722092239054","interval":0,"difficulty":0.0866458138005247,"stability":0.10000011324882507,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220721092239054"},{"due":"20220815031859020","interval":9,"difficulty":1,"stability":16.43780488763927,"retrievability":0.00007617816609952556,"grade":2,"lapses":0,"reps":2,"review":"20220730031859020"}]
interval: 22
lapses: 0
modified: 20220821114847464
reps: 3
retrievability: 0.8684786995977097
review: 20220821114847464
stability: 95.63227532116423
tags: ?
title: 包含min函数的栈
type: text/vnd.tiddlywiki

```
解题思路：
普通栈的 push() 和 pop() 函数的复杂度为 O(1)O(1) ；而获取栈最小值 min() 函数需要遍历整个栈，复杂度为 O(N)O(N) 。

本题难点： 将 min() 函数复杂度降为 O(1)O(1) ，可通过建立辅助栈实现；
数据栈 AA ： 栈 AA 用于存储所有元素，保证入栈 push() 函数、出栈 pop() 函数、获取栈顶 top() 函数的正常逻辑。
辅助栈 BB ： 栈 BB 中存储栈 AA 中所有 非严格降序 的元素，则栈 AA 中的最小元素始终对应栈 BB 的栈顶元素，即 min() 函数只需返回栈 BB 的栈顶元素即可。

因此，只需设法维护好 栈 BB 的元素，使其保持非严格降序，即可实现 min() 函数的 O(1)O(1) 复杂度。
```
```
函数设计：
push(x) 函数： 重点为保持栈 BB 的元素是 非严格降序 的。

将 xx 压入栈 AA （即 A.add(x) ）；
若 ① 栈 BB 为空 或 ② xx 小于等于 栈 BB 的栈顶元素，则将 xx 压入栈 BB （即 B.add(x) ）。
pop() 函数： 重点为保持栈 A, BA,B 的 元素一致性 。

执行栈 AA 出栈（即 A.pop() ），将出栈元素记为 yy ；
若 yy 等于栈 BB 的栈顶元素，则执行栈 B 出栈（即 B.pop() ）。
top() 函数： 直接返回栈 AA 的栈顶元素即可，即返回 A.peek() 。

min() 函数： 直接返回栈 BB 的栈顶元素即可，即返回 B.peek() 。
```
```
复杂度分析：
时间复杂度 O(1)O(1) ： push(), pop(), top(), min() 四个函数的时间复杂度均为常数级别。
空间复杂度 O(N)O(N) ： 当共有 NN 个待入栈元素时，辅助栈 BB 最差情况下存储 NN 个元素，使用 O(N)O(N) 额外空间。

```