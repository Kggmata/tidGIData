created: 20220614011343493
difficulty: 1.068971512253249
due: 20220922082539704
grade: 1
history: [{"due":"20220617033748532","interval":0,"difficulty":0.8361549804978878,"stability":0.1004638671875,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220616033748532"},{"due":"20220702140340929","interval":2,"difficulty":1,"stability":13.503436503233734,"retrievability":0.1227653108614827,"grade":2,"lapses":0,"reps":2,"review":"20220618140340929"}]
interval: 18
lapses: 0
modified: 20220706082539704
reps: 3
retrievability: 0.8689715122532491
review: 20220706082539703
stability: 77.82539154345864
tags: 用户画像web界面 ?
title: lambda架构
type: text/vnd.tiddlywiki

https://libertydream.github.io/2020/04/12/lambda-%E5%92%8C-kappa-%E7%AE%80%E4%BB%8B/#:~:text=Lambda%20%E6%9E%B6%E6%9E%84%E6%98%AF%E4%B8%80%E7%A7%8D,%E7%94%B1%E6%AD%A4%E6%94%B9%E5%96%84%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E3%80%82

https://medium.com/towards-data-science/a-brief-introduction-to-two-data-processing-architectures-lambda-and-kappa-for-big-data-4f35c28005bb

Lambda 架构

`今天描述的Lambda架构是Storm的作业提出的离线+实时数据融入`

```
Lambda 架构是一种能高效处理海量数据的实时数据处理技术，其高效性来自于大吞吐量，低延迟以及良好的容错性。而一般讲到“数据处理”，多是指代高吞吐，低延迟和准实时计算导向的一类应用，它们允许开发人员以代码逻辑形式或是基于事件的自然语言处理模型来定义增量规则，从而实现鲁棒、高效与自动化，由此改善数据质量。同时，任何数据状态的变动对这些系统来讲都是一个事件，事实上，系统可能会下达一项命令在后台查询或调用增量程序来响应事件。

```
[img[TIM截图20191101174020.png2022-06-14 17_46_03.png]]
Lambda的三层架构


Kappa 架构

```
2014 年 Jay Kreps 在一次研讨会上指出了一些 Lambda 架构间的差异，大数据世界自此迎来了另一个备选架构，它的代码量更少，特别适用于那些使用多层 Lambda 架构显得有些奢侈的企业场景。

Kappa 架构不能被简单视作 Lambda 架构的替代品，相反，它是在离线层对满足业务需求不是必须项时的一个备选项。该架构适合实时处理不同事件，下图展示了其整体结构
```

[img[Lambda 和 Kappa 架构简介 - 明月轩 %7C Li_e9c873982022-06-14 11_55_38.jpg]]

离线层

```
新数据不断喂给数据系统，期间每个样本都会同时发给离线和加速层。所有进入离线层的数据流都会在数据湖（Data Lake）上进行计算处理。数据湖多会使用基于内存的数据库或 NoSQL 类的永久存储设施，数据存好后离线层使用 MapReduce 或一些机器学习方法对数据进行处理并由此对接下来的内容进行预测。
```

加速层

```
加速层会享用离线层事件溯源成果。离线层中的数据处理会涉及增量程序，MapReduce 或机器学习模型的更新，模型会被加速层进一步用来处理新数据。就这样，加速层借助富集过程得到结果，保证服务层请求响应延迟处于低位。而加速层也几乎只处理实时数据，计算负荷较低，延迟有保障。
```

服务层

```
从离线层得到离线视图（batch view），加速层得到准实时视图（near-real time view），统一送给服务层。服务层使用这些信息临时应付那些等候的查询。
```

如果将整个过程用函数方程表示，任意大数据查询都可归结为如下形式

Query
=
λ
(
Complete data
)
=
λ
(
live streaming data
)
⋅
λ
(
stored data
)
方程中所用符号名为 Lambda_（音译：拉姆达）_，Lambda 架构的名字也源自于此。这个方程广为熟悉数据分析轶事的人所知，从中可以看出所有数据相关查询，结合离线历史信息和实时流，Lambda 架构都能处理。