created: 20220609102851740
difficulty: 1.0606496253758355
due: 20220905125436678
grade: 1
history: [{"due":"20220613143152638","interval":0,"difficulty":1.0984764469154382,"stability":0.10185546875000001,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220612143152638"},{"due":"20220616224942444","interval":3,"difficulty":1.3433801103128513,"stability":0.07476910459712456,"retrievability":0.04490366339741324,"grade":0,"lapses":1,"reps":1,"review":"20220615224942444"},{"due":"20220619114725907","interval":2,"difficulty":1.6030880571804265,"stability":0.05491298557316543,"retrievability":0.05970794686757527,"grade":0,"lapses":2,"reps":1,"review":"20220618114725906"},{"due":"20220630125303657","interval":2,"difficulty":1,"stability":9.829205553538575,"retrievability":0.021550365655700003,"grade":2,"lapses":2,"reps":2,"review":"20220620125303657"}]
interval: 14
lapses: 2
modified: 20220704125436678
reps: 3
retrievability: 0.8606496253758356
review: 20220704125436678
stability: 63.40697725150013
tags: kafka ?
title: kafka的offset查找过程
type: text/vnd.tiddlywiki

[img[快速认识Kafka阶段（1）——最详细的Kafka介绍 - 云+2022-06-09 18_29_06.png]]
比如：要查找绝对offset为7的Message：

```
上图的左半部分是索引文件，里面存储的是一对一对的key-value，其中key是消息在数据文件（对应的log文件）中的编号，比如“1,3,6,8……”，分别表示在log文件中的第1条消息、第3条消息、第6条消息、第8条消息……，那么为什么在index文件中这些编号不是连续的呢？这是因为index文件中并没有为数据文件中的每条消息都建立索引，而是采用了稀疏存储的方式，每隔一定字节的数据建立一条索引。这样避免了索引文件占用过多的空间，从而可以将索引文件保留在内存中。但缺点是没有建立索引的Message也不能一次定位到其在数据文件的位置，从而需要做一次顺序扫描，但是这次顺序扫描的范围就很小了。

其中以索引文件中元数据3,4597为例，其中3代表在右边log数据文件中从上到下第3个消息(在全局partiton表示第4597个消息)，
 其中4597表示该消息的物理偏移地址（位置）为4597。
```

```
在partition中如何通过oﬀset查找message？查找的算法是：

索引文件：根据oﬀset的值，查找segment段中的index索引文件。

注：由于索引文件命名是以上一个文件的最后一个oﬀset进行命名的，所以，使用二分查找算法能够根据oﬀset快速定位到指定的索引文件。

近似position：找到索引文件后，根据oﬀset进行定位，找到索引文件中的符合范围的索引。

注：由于是稀疏索引，所以可能只能定位到一条相近的消息

具体消息：得到position以后，再到对应的log文件中，从position出开始查找oﬀset对应的消息，将每条消息的oﬀset与目标oﬀset进行比较，直到找到消息

示例：我们要查找oﬀset=368776这条消息（参照上面的图）

那么先找到00000000000000368769.index,
在索引文件中，找到索引6（对应的offset=368775）的具体位置position=1407（注：这次只能找到近似offset）
到log文件中，根据1407这个position开始查找，比较每条消息的oﬀset是否大于等于368776。最后查找到对应的消息以后返回
```