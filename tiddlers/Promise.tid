created: 20221208100216494
creator: Yangqing QU
modified: 20230102012925441
modifier: Yangqing QU
tags: ? js
title: Promise
type: text/vnd.tiddlywiki

JavaScript 的 promise 是一种用于异步编程的设计模式。它允许你将异步操作以同步操作的形式表达出来，并且能够规避一些回调地狱的问题。

Promise 本质上是一个对象，其状态可能处于以下三种：

pending（进行中）
fulfilled（已成功）
rejected（已失败）
当创建一个 promise 时，它的状态是 pending，然后传递给 promise 的两个函数可以用来改变它的状态。这两个函数分别是：

resolve：表示 promise 的状态已成功，并接受一个参数作为成功的值。
reject：表示 promise 的状态已失败，并接受一个参数作为失败的原因。
一旦 promise 的状态改变为 fulfilled 或 rejected，它就不能再次更改状态。这种不可变性使得 promise 非常有用，因为它保证了我们可以依赖于 promise 的状态。

举个例子，假设我们有一个异步函数 fetchData，它会返回一个 promise。这个 promise 的状态将在数据被成功获取时改变为 fulfilled，并将数据作为成功的值传递给 resolve 函数。如果在获取数据时出错，则将 promise 的状态改变为 rejected，并将错误信息作为失败的原因传递给 reject 函数。当我们调用 fetchData 函数时，它将返回一个 promise。我们可以使用 .then 方法来处理 promise 的成功和失败情况。.then 方法接受两个函数作为参数：第一个函数是在 promise 成功时调用的函数，第二个函数是在 promise 失败时调用的函数。在这两个函数中，我们可以处理 promise 的成功值和失败原因，并执行相应的操作。

```
fetchData()
  .then(function(data) {
    // promise 成功，处理数据
  }, function(error) {
    // promise 失败，处理错误
  });
```
另外，还有一个 .catch 方法可以用来处理 promise 失败的情况。它接受一个函数作为参数，并在 promise 失败时调用这个函数，并将失败的原因作为参数传递给该函数。

```
fetchData()
  .then(function(data) {
    // promise 成功，处理数据
  })
  .catch(function(error) {
    // promise 失败，处理错误
  });

```

另外，还有一个 Promise.all 方法，它可以用来同时执行多个异步操作，并等待所有操作完成后再执行后续操作。Promise.all 方法接受一个包含多个 promise 的数组作为参数，并返回一个新的 promise。这个新的 promise 的状态将在所有传入的 promise 都完成后改变，并将所有 promise 的成功值按顺序组成一个数组作为新的 promise 的成功值。

举个例子，假设我们有两个异步函数 fetchData1 和 fetchData2，它们都会返回一个 promise。我们可以使用 Promise.all 方法来等待两个函数的执行完成，然后再处理它们的返回值。

```
Promise.all([fetchData1(), fetchData2()]).then(function(values) {
  // values 数组包含两个 promise 的成功值
});
```

总之，JavaScript 的 promise 是一种优雅的方式来处理异步操作，它可以让我们以同步的方式编写异步代码，并且能够规避回调地狱的问题。