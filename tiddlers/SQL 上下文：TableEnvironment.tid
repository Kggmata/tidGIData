created: 20220717022325623
difficulty: 1
due: 20220828084527826
grade: 2
history: [{"due":"20220805134341052","interval":0,"difficulty":0.07897385645727227,"stability":0.10000011324882507,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220726065131508"},{"due":"20220810074307347","interval":14,"difficulty":1,"stability":0.07408182337905919,"retrievability":3.9260748606056117e-7,"grade":0,"lapses":1,"reps":1,"review":"20220809074307347"}]
interval: 6
lapses: 1
modified: 20220815084527826
reps: 2
retrievability: 0.00019680266123736466
review: 20220815084527825
stability: 12.92339038601066
tags: ?
title: SQL 上下文：TableEnvironment
type: text/vnd.tiddlywiki

```
TableEnvironment 是使用 Table API / SQL 必须的一个接口。

可以认为 TableEnvironment 在 Table API / SQL 中的地位和 StreamExecutionEnvironment 在 DataStream 中的地位是一样的，都是包含了一个 Flink 任务运行时的所有上下文环境信息。

TableEnvironment 包含的功能如下：
1	Catalog 管理：Catalog 可以理解为 Flink 的 MetaStore，类似 Hive MetaStore 对在 Hive 中的地位，关于 Flink Catalog 的详细内容后续进行介绍
2	表管理：在 Catalog 中注册表
3	SQL 查询：（这 TMD 还用说，最基本的功能啊），就像 DataStream 中提供了 addSource、map、flatmap 等接口
4	UDF 管理：注册用户定义（标量函数：一进一出、表函数：一进多出、聚合函数：多进一出）函数
5	UDF 扩展：加载可插拔 Module（Module 可以理解为 Flink 管理 UDF 的模块，是可插拔的，可以让小伙伴萌自定义 Module，去支持奇奇怪怪的 UDF 功能）
6	DataStream 和 Table（Table\SQL API 的查询结果）之间进行转换：1.13 版本的只有流任务支持，批任务不支持。1.14 支持批任务。
接下来介绍如何创建一个 TableEnvironment。案例为 Python。

方式一：通过 EnvironmentSettings 创建 TableEnvironment
```
```
// 1. 就是设置一些环境信息
settings = EnvironmentSettings
	.newInstance()
	.inStreamingMode() // 声明为流任务
	//.inBatchMode() // 声明为批任务
	.build();

// 2. 创建 TableEnvironment
tEnv = TableEnvironment.create(settings);

```
```
-	如果是 inStreamingMode，则最终创建出来的 TableEnvironment 实例为 StreamTableEnvironmentImpl
-	如果你是 inBatchMode，则最终创建出来的 TableEnvironment 实例为 TableEnvironmentImpl
虽然两者都继承了 TableEnvironment 接口，但是 StreamTableEnvironmentImpl 支持的功能更多一些。可以直接去看看接口实验一下，这里就不进行详细介绍。
方式二：通过已有的 StreamExecutionEnvironment 创建 TableEnvironment

```